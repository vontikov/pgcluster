// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pg/pg.go

// Package mock_pg is a generated GoMock package.
package mock_pg

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pg "github.com/vontikov/pgcluster/internal/pg"
)

// MockCluster is a mock of Cluster interface.
type MockCluster struct {
	ctrl     *gomock.Controller
	recorder *MockClusterMockRecorder
}

// MockClusterMockRecorder is the mock recorder for MockCluster.
type MockClusterMockRecorder struct {
	mock *MockCluster
}

// NewMockCluster creates a new mock instance.
func NewMockCluster(ctrl *gomock.Controller) *MockCluster {
	mock := &MockCluster{ctrl: ctrl}
	mock.recorder = &MockClusterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCluster) EXPECT() *MockClusterMockRecorder {
	return m.recorder
}

// Alive mocks base method.
func (m *MockCluster) Alive() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Alive")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Alive indicates an expected call of Alive.
func (mr *MockClusterMockRecorder) Alive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alive", reflect.TypeOf((*MockCluster)(nil).Alive))
}

// Backup mocks base method.
func (m *MockCluster) Backup(host string, port int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Backup", host, port)
	ret0, _ := ret[0].(error)
	return ret0
}

// Backup indicates an expected call of Backup.
func (mr *MockClusterMockRecorder) Backup(host, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Backup", reflect.TypeOf((*MockCluster)(nil).Backup), host, port)
}

// InRecovery mocks base method.
func (m *MockCluster) InRecovery() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InRecovery")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InRecovery indicates an expected call of InRecovery.
func (mr *MockClusterMockRecorder) InRecovery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InRecovery", reflect.TypeOf((*MockCluster)(nil).InRecovery))
}

// MasterInfo mocks base method.
func (m *MockCluster) MasterInfo() (*pg.ConnectionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MasterInfo")
	ret0, _ := ret[0].(*pg.ConnectionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MasterInfo indicates an expected call of MasterInfo.
func (mr *MockClusterMockRecorder) MasterInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MasterInfo", reflect.TypeOf((*MockCluster)(nil).MasterInfo))
}

// Promote mocks base method.
func (m *MockCluster) Promote() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Promote")
	ret0, _ := ret[0].(error)
	return ret0
}

// Promote indicates an expected call of Promote.
func (mr *MockClusterMockRecorder) Promote() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Promote", reflect.TypeOf((*MockCluster)(nil).Promote))
}

// Start mocks base method.
func (m *MockCluster) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockClusterMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCluster)(nil).Start))
}

// Stop mocks base method.
func (m *MockCluster) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockClusterMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockCluster)(nil).Stop))
}

// Version mocks base method.
func (m *MockCluster) Version() (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Version indicates an expected call of Version.
func (mr *MockClusterMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockCluster)(nil).Version))
}
