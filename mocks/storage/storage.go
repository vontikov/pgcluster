// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// DictionaryGet mocks base method.
func (m *MockStorage) DictionaryGet(ctx context.Context, k []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DictionaryGet", ctx, k)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DictionaryGet indicates an expected call of DictionaryGet.
func (mr *MockStorageMockRecorder) DictionaryGet(ctx, k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DictionaryGet", reflect.TypeOf((*MockStorage)(nil).DictionaryGet), ctx, k)
}

// DictionaryPut mocks base method.
func (m *MockStorage) DictionaryPut(ctx context.Context, k, v []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DictionaryPut", ctx, k, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// DictionaryPut indicates an expected call of DictionaryPut.
func (mr *MockStorageMockRecorder) DictionaryPut(ctx, k, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DictionaryPut", reflect.TypeOf((*MockStorage)(nil).DictionaryPut), ctx, k, v)
}

// DictionaryRemove mocks base method.
func (m *MockStorage) DictionaryRemove(ctx context.Context, k []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DictionaryRemove", ctx, k)
	ret0, _ := ret[0].(error)
	return ret0
}

// DictionaryRemove indicates an expected call of DictionaryRemove.
func (mr *MockStorageMockRecorder) DictionaryRemove(ctx, k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DictionaryRemove", reflect.TypeOf((*MockStorage)(nil).DictionaryRemove), ctx, k)
}

// MutexTryLock mocks base method.
func (m *MockStorage) MutexTryLock(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MutexTryLock", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MutexTryLock indicates an expected call of MutexTryLock.
func (mr *MockStorageMockRecorder) MutexTryLock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MutexTryLock", reflect.TypeOf((*MockStorage)(nil).MutexTryLock), arg0)
}

// MutexUnlock mocks base method.
func (m *MockStorage) MutexUnlock(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MutexUnlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MutexUnlock indicates an expected call of MutexUnlock.
func (mr *MockStorageMockRecorder) MutexUnlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MutexUnlock", reflect.TypeOf((*MockStorage)(nil).MutexUnlock), arg0)
}
